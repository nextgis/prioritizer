#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys

import argparse

import numpy as np

from prioretizer.grasslib.configurator import Params
from prioretizer.grasslib.grasslib import GRASS

from prioretizer.defaults import DEFAULT_CONFIG_NAME


def parse_args():
    parser = argparse.ArgumentParser(description='Apply model.')

    parser.add_argument(
        '--config',
        dest='config',
        action='store',
        default=DEFAULT_CONFIG_NAME,
        help='Config file (default: %s)' % (DEFAULT_CONFIG_NAME, )
    )
    parser.add_argument(
        '--model_raster',
        dest='model_raster',
        action='store',
        required=True,
        help='Name of result raster.'
    )
    parser.add_argument(
        '--result',
        dest='result',
        action='store',
        default='-',
        help='Name of result file to store model.'
    )
    parser.add_argument(
        '--lonlat',
        dest='lonlat',
        action='store',
        required=True,
        help='Name of file with coordinates.'
    )
    parser.add_argument(
        '--overwrite',
        dest='overwrite',
        action='store_const',
        const=True,
        default=False,
        help='Overwrite existing result file (True or False).'
    )
    args = parser.parse_args()

    return args

def main():
    args = parse_args()
    args = vars(args)

    overwrite = args['overwrite']
    result = args['result']
    model_raster = args['model_raster']

    coords = args['lonlat']
    if coords == '-':
        coords = sys.stdin

    lonlat = np.loadtxt(coords, delimiter=',')
    if len(lonlat.shape) != 2:
        raise ValueError('Coordinates must be in X,Y format')

    config = args['config']
    config_params = Params(config)

    grass_lib = config_params.grass_lib
    grass_exec = config_params.grass_exec

    location = config_params.location
    dbase = config_params.grassdata

    grs = GRASS(
        gisexec=grass_exec,
        gisbase=grass_lib,
        grassdata=dbase,
        location=location,
        init_loc=True
    )

    if os.path.isfile(result) and not overwrite:
        sys.exit("File %s exists. Use --overwrite flag or other filename." % (result, ))

    probas = []
    for lon, lat in lonlat:
        xy = grs.grass.read_command(
            'm.proj', coordinates="%s,%s" % (lon, lat), separator=',', flags='i')
        # delete z-coordinate
        xy = xy.split(",")[:2]
        xy = ','.join(xy)

        p = grs.grass.read_command(
            'r.what', map=model_raster, coordinates=xy)
        # delete coordinates
        p = p.split("|")[-1]
        probas.append(p)

    probas = ''.join(probas)

    if result == '-':
        print probas
    else:
        res_file = open(result, 'w')
        res_file.write(probas)


if __name__ == '__main__':
    main()

