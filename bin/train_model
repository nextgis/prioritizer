#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys

import argparse

import pickle

import  numpy as np

# from scipy.stats import randint as sp_randint
from scipy.stats import uniform

from sklearn.linear_model import LogisticRegression

from sklearn.model_selection import train_test_split
from sklearn.model_selection import RandomizedSearchCV

from sklearn.preprocessing import StandardScaler

from sklearn.metrics import confusion_matrix, accuracy_score

from prioretizer.grasslib.configurator import Params
from prioretizer.grasslib.grasslib import GRASS

from prioretizer.defaults import DEFAULT_CONFIG_NAME


def parse_args():
    parser = argparse.ArgumentParser(description='Create Database for logging ranging.')

    parser.add_argument(
        '--config',
        dest='config',
        action='store',
        default=DEFAULT_CONFIG_NAME,
        help='Config file (default: %s)' % (DEFAULT_CONFIG_NAME, )
    )
    parser.add_argument(
        '--x',
        dest='x',
        action='store',
        required=True,
        help='List of factor rasters (comma-separated: raster1,raster2,...)'
    )
    parser.add_argument(
        '--y',
        dest='y',
        action='store',
        required=True,
        help='Name of result raster.'
    )
    parser.add_argument(
        '--result',
        dest='result',
        action='store',
        required=True,
        help='Name of result file to store model.'
    )
    parser.add_argument(
        '--result_raster',
        dest='result_raster',
        action='store',
        required=True,
        help='Name of result raster.'
    )
    parser.add_argument(
        '--human',
        dest='human',
        action='store',
        help='Name of human-readable resume file.'
    )
    parser.add_argument(
        '--overwrite',
        dest='overwrite',
        action='store_const',
        const=True,
        default=False,
        help='Overwrite existing result file (True or False).'
    )
    args = parser.parse_args()

    return args

class Trainer:
    def __init__(self, X, y):
        # На данный момент используется заглушка
        self.diff = -(X[:, 0] - X[:, 1])/1000.0

        self.model = None
        self.scaler = None

    def train(self):
        pass

    def predict_probas(self, X):
        # Возвращаем логистическую функцию разностей стоимостей
        return 1.0/(1 + np.exp(self.diff))

    def describe(self):
        description = """
        На данный момент обучение в явном виде отсутствует. Используется заглушка.
        """

        return description

def main():
    args = parse_args()
    args = vars(args)

    overwrite = args['overwrite']
    x = args['x'].split(',')
    y = args['y']

    result = args['result']
    result_raster = args['result_raster']
    human = args['human']

    config = args['config']
    config_params = Params(config)

    grass_lib = config_params.grass_lib
    grass_exec = config_params.grass_exec

    location = config_params.location
    dbase = config_params.grassdata

    grs = GRASS(
        gisexec=grass_exec,
        gisbase=grass_lib,
        grassdata=dbase,
        location=location,
        init_loc=True
    )
    X = grs.rasters_to_array(x)
    Y = grs.raster_to_array(y)

    if os.path.isfile(result) and not overwrite:
        sys.exit("File %s exists. Use --overwrite flag or other filename." % (result, ))

    if (human is not None) and os.path.isfile(human) and not overwrite:
        sys.exit("File %s exists. Use --overwrite flag or other filename." % (human, ))

    trainer = Trainer(X, Y)
    trainer.train()
    pickle.dump((trainer.model, trainer.scaler), open(result, 'wb'), protocol=2)

    probas = trainer.predict_probas(X)
    grs.array_to_rast(probas, result_raster, overwrite=overwrite)

    if human is not None:
        human_file = open(human, 'w')
        human_file.write(trainer.describe())


if __name__ == '__main__':
    main()

