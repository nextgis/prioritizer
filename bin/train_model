#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys

import argparse
import uuid


from prioretizer.grasslib.configurator import Params
from prioretizer.grasslib.grasslib import GRASS

from prioretizer.models.prioretizer import Optimizer
from prioretizer.models.model_config import ModelParams
from prioretizer.models.walking_cost import WalkingCost
from prioretizer.models.utils import temp_name

from prioretizer.defaults import DEFAULT_CONFIG_NAME


def parse_args():
    parser = argparse.ArgumentParser(description='Create Database for logging ranging.')

    parser.add_argument(
        '--config',
        dest='config',
        action='store',
        default=DEFAULT_CONFIG_NAME,
        help='Config file (default: %s)' % (DEFAULT_CONFIG_NAME, )
    )
    parser.add_argument(
        '--init_model',
        dest='init_model',
        action='store',
        required=True,
        help='Initial model configuration'
    )
    parser.add_argument(
        '--train_points',
        dest='train_points',
        action='store',
        required=True,
        help='Name of vector layer to store training points.'
    )
    parser.add_argument(
        '--class_column',
        dest='class_column',
        action='store',
        required=True,
        help='Name of column with class labels'
    )
    parser.add_argument(
        '--result',
        dest='result',
        action='store',
        required=True,
        help='Name of result file to store fitted model.'
    )
    parser.add_argument(
        '--steps',
        dest='steps',
        action='store',
        type=int,
        default=2500,
        help='Name of vector layer to store training points.'
    )
    parser.add_argument(
        '--log',
        dest='log',
        action='store',
        default='train.log',
        help='Name of log file.'
    )
    parser.add_argument(
        '--overwrite',
        dest='overwrite',
        action='store_const',
        const=True,
        default=False,
        help='Overwrite existing result file (True or False).'
    )
    args = parser.parse_args()

    return args

class Trainer:
    def __init__(self, grass, init_model_params):
        self.grs = grass
        self.init_model_params = init_model_params

    def train(self, points, class_column, nsteps, logfile):
        try:
            colname = temp_name('cost', uuid.uuid4().hex)
            wood_map = self.init_model_params.wood_name
            self.grs.grass.run_command('v.db.addcolumn', map=wood_map, columns="%s double" % (colname,))

            wood_c = self.init_model_params.get_wood_cost_model(self.grs, colname)
            walk_c = WalkingCost(self.grs)

            optimizer = Optimizer(
                self.grs,
                self.init_model_params.stocks,
                self.init_model_params.road_labels,
                self.init_model_params.wood_labels,
                walk_c, wood_c,
                points, class_column,
                log_file=logfile
            )

            params = (
                self.init_model_params.walking_cost_params,
                self.init_model_params.wood_cost_params,
                self.init_model_params.func_alpha
            )
            result = optimizer.optimize(
                x0=(self.init_model_params.walking_cost_params, self.init_model_params.wood_cost_params, self.init_model_params.func_alpha),
                nsteps=nsteps, nshows=1
            )

        finally:
            self.grs.grass.run_command('v.db.dropcolumn', map=wood_map, columns=colname)

        return result


    def describe(self):
        description = """
        На данный момент обучение в явном виде отсутствует. Используется заглушка.
        """

        return description

def main():
    args = parse_args()
    args = vars(args)

    overwrite = args['overwrite']
    init_model_config = args['init_model']
    init_model_config = ModelParams(init_model_config)

    train_points = args['train_points']
    class_column = args['class_column']
    steps = args['steps']

    result = args['result']
    log = args['log']

    config = args['config']
    config_params = Params(config)

    grass_lib = config_params.grass_lib
    grass_exec = config_params.grass_exec

    location = config_params.location
    dbase = config_params.grassdata

    if os.path.isfile(result) and not overwrite:
        sys.exit("File %s exists. Use --overwrite flag or other filename." % (result, ))

    grs = GRASS(
        gisexec=grass_exec,
        gisbase=grass_lib,
        grassdata=dbase,
        location=location,
        init_loc=True
    )
    trainer = Trainer(grs, init_model_config)
    params = trainer.train(train_points, class_column, steps, logfile=log)
    print params


if __name__ == '__main__':
    main()

