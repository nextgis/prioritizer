#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import uuid


import argparse

from prioretizer.grasslib.configurator import Params
from prioretizer.grasslib.grasslib import GRASS

from prioretizer.models.model_config import ModelParams
from prioretizer.models.prioretizer import Prioretizer
from prioretizer.models.walking_cost import WalkingCost

from prioretizer.defaults import DEFAULT_CONFIG_NAME

from prioretizer.models.utils import temp_name

def parse_args():
    parser = argparse.ArgumentParser(description='Apply model')

    parser.add_argument(
        '--config',
        dest='config',
        action='store',
        default=DEFAULT_CONFIG_NAME,
        help='Config file (default: %s)' % (DEFAULT_CONFIG_NAME, )
    )
    parser.add_argument(
        '--model',
        dest='model',
        action='store',
        required=True,
        help='Name model file.'
    )
    parser.add_argument(
        '--result_raster',
        dest='result_raster',
        action='store',
        required=True,
        help='Name of result raster to store in DB.'
    )
    parser.add_argument(
        '--export_raster',
        dest='export_raster',
        action='store',
        help='Name of result raster to store in DB.'
    )
    parser.add_argument(
        '--overwrite',
        dest='overwrite',
        action='store_const',
        const=True,
        default=False,
        help='Overwrite existing result file (True or False).'
    )
    args = parser.parse_args()

    return args

def main():
    args = parse_args()
    args = vars(args)

    overwrite = args['overwrite']
    result = args['result_raster']
    model = args['model']
    model_params = ModelParams(model)
    model_params.load()

    export_raster = args['export_raster']
    if (export_raster is not None) and os.path.isfile(export_raster) and not overwrite:
        sys.exit("File %s exists. Use --overwrite flag or other filename." % (export_raster, ))

    config = args['config']
    config_params = Params(config)

    grass_lib = config_params.grass_lib
    grass_exec = config_params.grass_exec

    location = config_params.location
    dbase = config_params.grassdata

    grs = GRASS(
        gisexec=grass_exec,
        gisbase=grass_lib,
        grassdata=dbase,
        location=location,
        init_loc=True
    )

    try:
        colname = temp_name('cost', uuid.uuid4().hex)
        wood_map = model_params.wood_name
        grs.grass.run_command('v.db.addcolumn', map=wood_map, columns="%s double" % (colname, ))

        wood_c = model_params.get_wood_cost_model(grs, colname)
        walk_c = WalkingCost(grs)

        prioretizer = Prioretizer(grs, walk_c, wood_c)
        prioretizer.calc_priorities(
            result,
            model_params.walking_cost_params, model_params.wood_cost_params,
            model_params.func_alpha,
            overwrite=overwrite
        )
    finally:
        grs.grass.run_command('v.db.dropcolumn', map=wood_map, columns=colname)

    if export_raster is not None:
        grs.grass.run_command('r.out.gdal', input=result, out=export_raster, createopt="COMPRESS=DEFLATE", overwrite=True)


if __name__ == '__main__':
    main()

