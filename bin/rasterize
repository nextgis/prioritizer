#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse

from ConfigParser import ConfigParser


from prioretizer.grasslib.configurator import Params
from prioretizer.grasslib.grasslib import GRASS

from prioretizer.defaults import DEFAULT_CONFIG_NAME


def parse_cost_config(config_file):
    config = ConfigParser()
    config.readfp(open(config_file))

    costs = dict()
    for name, cost in config.items('FIELDS'):
        costs[name] = float(cost)

    conf = dict(
        attribute=config.get('ATTRUBUTE', 'name'),
        type=config.get('ATTRUBUTE', 'type'),
        costs=costs
    )

    return conf



def parse_args():
    parser = argparse.ArgumentParser(description='Rasterize vector layer using attribute.')

    parser.add_argument(
        '--config',
        dest='config',
        action='store',
        # const=DEFAULT_CONFIG_NAME,
        default=DEFAULT_CONFIG_NAME,
        help='Config file (default: %s)' % (DEFAULT_CONFIG_NAME, )
    )
    parser.add_argument(
        '--layer',
        dest='layer',
        action='store',
        required=True,
        help='Name of layer.'
    )
    parser.add_argument(
        '--cost_config',
        dest='cost_config',
        action='store',
        required=True,
        help='Name of config file to store description of the attribute.'
    )
    parser.add_argument(
        '--overwrite',
        dest='overwrite',
        action='store_const',
        const=True,
        default=False,
        help='Overwrite existing raster layer (True or False).'
    )
    args = parser.parse_args()

    return args


def main():
    args = parse_args()
    args = vars(args)

    layer = args['layer']
    overwrite = args['overwrite']

    cost_config = args['cost_config']
    cost_params = parse_cost_config(cost_config)

    attribute = cost_params['attribute']
    costs = cost_params['costs']
    vect_type = cost_params['type']

    config = args['config']
    config_params = Params(config)

    grass_lib = config_params.grass_lib
    grass_exec = config_params.grass_exec

    location = config_params.location
    dbase = config_params.grassdata

    grs = GRASS(
        gisexec=grass_exec,
        gisbase=grass_lib,
        grassdata=dbase,
        location=location,
        init_loc=True
    )

    for attr_value, cost in costs.iteritems():
        grs.grass.run_command(
            'v.to.rast',
            input=layer,
            output=attr_value,
            type=vect_type,
            where='%s = "%s"' % (attribute, attr_value),
            use='val',
            value=cost,
            overwrite=overwrite
        )

if __name__ == '__main__':
    main()

